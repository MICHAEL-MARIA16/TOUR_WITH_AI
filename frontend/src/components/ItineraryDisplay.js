import React, { useState } from 'react';
import { 
  Clock, 
  MapPin, 
  Navigation, 
  CheckCircle, 
  Circle,
  Star,
  IndianRupee,
  Users,
  Car,
  Info,
  Download,
  Share2,
  Calendar
} from 'lucide-react';
import { UTILS } from '../utils/constants';
import toast from 'react-hot-toast';

const ItineraryDisplay = ({ 
  itinerary, 
  optimizedRoute, 
  visitedPlaces, 
  onPlaceVisited, 
  routeSettings 
}) => {
  const [expandedPlace, setExpandedPlace] = useState(null);
  const [showTravelDetails, setShowTravelDetails] = useState(false);

  if (!itinerary || itinerary.length === 0) {
    return (
      <div className="itinerary-empty">
        <div className="empty-state">
          <Calendar className="empty-icon" />
          <h3>No Itinerary Yet</h3>
          <p>Select places and optimize your route to see your personalized itinerary.</p>
        </div>
      </div>
    );
  }

  const summary = {
    totalPlaces: itinerary.length,
    totalTime: itinerary.reduce((sum, item) => 
      sum + (item.visitDuration || 0) + (item.travelTimeToNext || 0), 0
    ),
    totalDistance: itinerary.reduce((sum, item) => 
      sum + (item.travelDistanceToNext || 0), 0
    ),
    visitedCount: itinerary.filter(item => 
      visitedPlaces.has(item.place.id)
    ).length,
    estimatedCost: itinerary.reduce((sum, item) => 
      sum + (item.place.entryFee?.indian || 0), 0
    )
  };

  const handlePlaceVisited = (placeId, isVisited) => {
    onPlaceVisited(placeId, isVisited);
    toast.success(
      isVisited ? 'Place marked as visited!' : 'Place unmarked as visited'
    );
  };

  const handleShareItinerary = async () => {
    const itineraryText = `My South India Travel Itinerary:\n\n${
      itinerary.map((item, index) => 
        `${index + 1}. ${item.place.name} (${item.arrivalTime} - ${item.departureTime})`
      ).join('\n')
    }\n\nGenerated by TourWithAI`;

    try {
      if (navigator.share) {
        await navigator.share({
          title: 'My South India Itinerary',
          text: itineraryText
        });
      } else {
        await navigator.clipboard.writeText(itineraryText);
        toast.success('Itinerary copied to clipboard!');
      }
    } catch (error) {
      console.error('Share failed:', error);
      toast.error('Failed to share itinerary');
    }
  };

  const handleDownloadItinerary = () => {
    const itineraryData = {
      title: 'My South India Travel Itinerary',
      generatedAt: new Date().toISOString(),
      settings: routeSettings,
      summary,
      places: itinerary.map(item => ({
        name: item.place.name,
        city: item.place.city,
        state: item.place.state,
        arrivalTime: item.arrivalTime,
        departureTime: item.departureTime,
        visitDuration: item.visitDuration,
        entryFee: item.place.entryFee,
        category: item.place.category,
        rating: item.place.rating,
        description: item.place.description,
        address: item.place.address,
        amenities: item.place.amenities
      }))
    };

    const dataStr = JSON.stringify(itineraryData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `TourWithAI-Itinerary-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
    toast.success('Itinerary downloaded!');
  };

  return (
    <div className="itinerary-container">
      <div className="itinerary-header">
        <div className="itinerary-title">
          <Calendar className="title-icon" />
          <h3>Your Itinerary</h3>
        </div>
        
        <div className="itinerary-actions">
          <button 
            onClick={handleShareItinerary}
            className="action-btn"
            title="Share Itinerary"
          >
            <Share2 size={16} />
          </button>
          <button 
            onClick={handleDownloadItinerary}
            className="action-btn"
            title="Download Itinerary"
          >
            <Download size={16} />
          </button>
        </div>
      </div>

      <div className="itinerary-summary">
        <div className="summary-cards">
          <div className="summary-card">
            <MapPin className="summary-icon" />
            <div className="summary-content">
              <span className="summary-value">{summary.totalPlaces}</span>
              <span className="summary-label">Places</span>
            </div>
          </div>
          
          <div className="summary-card">
            <Clock className="summary-icon" />
            <div className="summary-content">
              <span className="summary-value">{UTILS.formatDuration(summary.totalTime)}</span>
              <span className="summary-label">Total Time</span>
            </div>
          </div>
          
          <div className="summary-card">
            <Navigation className="summary-icon" />
            <div className="summary-content">
              <span className="summary-value">{UTILS.formatDistance(summary.totalDistance)}</span>
              <span className="summary-label">Distance</span>
            </div>
          </div>
          
          <div className="summary-card">
            <IndianRupee className="summary-icon" />
            <div className="summary-content">
              <span className="summary-value">â‚¹{summary.estimatedCost}</span>
              <span className="summary-label">Entry Fees</span>
            </div>
          </div>
        </div>

        <div className="progress-section">
          <div className="progress-header">
            <span>Progress: {summary.visitedCount}/{summary.totalPlaces} places visited</span>
            <span className="progress-percentage">
              {Math.round((summary.visitedCount / summary.totalPlaces) * 100)}%
            </span>
          </div>
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ 
                width: `${(summary.visitedCount / summary.totalPlaces) * 100}%` 
              }}
            />
          </div>
        </div>
      </div>

      <div className="itinerary-list">
        {itinerary.map((item, index) => {
          const isVisited = visitedPlaces.has(item.place.id);
          const isExpanded = expandedPlace === item.place.id;
          const isLast = index === itinerary.length - 1;

          return (
            <div key={item.place.id} className={`itinerary-item ${isVisited ? 'visited' : ''}`}>
              <div className="timeline-connector">
                <div className={`timeline-dot ${isVisited ? 'completed' : ''}`}>
                  {isVisited ? (
                    <CheckCircle className="timeline-icon completed" />
                  ) : (
                    <Circle className="timeline-icon" />
                  )}
                </div>
                {!isLast && <div className="timeline-line" />}
              </div>

              <div className="itinerary-content">
                <div className="place-header">
                  <div className="place-main-info">
                    <div className="place-number">{index + 1}</div>
                    <div className="place-details">
                      <h4 className="place-name">{item.place.name}</h4>
                      <p className="place-location">
                        {item.place.city}, {item.place.state}
                      </p>
                    </div>
                  </div>

                  <div className="place-actions">
                    <button
                      onClick={() => handlePlaceVisited(item.place.id, !isVisited)}
                      className={`visited-btn ${isVisited ? 'visited' : ''}`}
                      title={isVisited ? 'Mark as not visited' : 'Mark as visited'}
                    >
                      {isVisited ? (
                        <CheckCircle className="visited-icon" />
                      ) : (
                        <Circle className="visited-icon" />
                      )}
                    </button>
                    
                    <button
                      onClick={() => setExpandedPlace(isExpanded ? null : item.place.id)}
                      className="expand-btn"
                      title={isExpanded ? 'Show less' : 'Show more'}
                    >
                      <Info className={`expand-icon ${isExpanded ? 'expanded' : ''}`} />
                    </button>
                  </div>
                </div>

                <div className="timing-info">
                  <div className="timing-item">
                    <Clock className="timing-icon" />
                    <span>{item.arrivalTime} - {item.departureTime}</span>
                    <span className="duration">({UTILS.formatDuration(item.visitDuration)})</span>
                  </div>
                  
                  {item.place.rating && (
                    <div className="rating">
                      <Star className="star-icon filled" />
                      <span>{item.place.rating}</span>
                    </div>
                  )}
                </div>

                {isExpanded && (
                  <div className="expanded-details">
                    <div className="place-description">
                      <p>{item.place.description}</p>
                    </div>

                    <div className="place-meta">
                      <div className="meta-grid">
                        <div className="meta-item">
                          <span className="meta-label">Category:</span>
                          <span className="meta-value">{item.place.category}</span>
                        </div>
                        
                        {item.place.entryFee && (
                          <div className="meta-item">
                            <span className="meta-label">Entry Fee:</span>
                            <span className="meta-value">
                              â‚¹{item.place.entryFee.indian} 
                              {item.place.entryFee.foreign > 0 && 
                                ` / â‚¹${item.place.entryFee.foreign} (Foreign)`
                              }
                            </span>
                          </div>
                        )}
                        
                        {item.place.kidFriendly && (
                          <div className="meta-item">
                            <span className="meta-label">Kid Friendly:</span>
                            <span className="meta-value">Yes</span>
                          </div>
                        )}
                        
                        {item.place.wheelchairAccessible && (
                          <div className="meta-item">
                            <span className="meta-label">Wheelchair Access:</span>
                            <span className="meta-value">Yes</span>
                          </div>
                        )}
                      </div>

                      {item.place.amenities && item.place.amenities.length > 0 && (
                        <div className="amenities">
                          <span className="amenities-label">Amenities:</span>
                          <div className="amenities-list">
                            {item.place.amenities.map((amenity, idx) => (
                              <span key={idx} className="amenity-tag">
                                {amenity}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}

                      {item.place.bestTimeToVisit && item.place.bestTimeToVisit.length > 0 && (
                        <div className="best-time">
                          <span className="best-time-label">Best time to visit:</span>
                          <span className="best-time-value">
                            {item.place.bestTimeToVisit.join(', ')}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {!isLast && item.travelTimeToNext > 0 && (
                  <div className="travel-info">
                    <div className="travel-header">
                      <Car className="travel-icon" />
                      <span>Travel to next destination</span>
                    </div>
                    
                    <div className="travel-details">
                      <div className="travel-time">
                        <Clock className="detail-icon" />
                        <span>{UTILS.formatDuration(item.travelTimeToNext)}</span>
                      </div>
                      
                      {item.travelDistanceToNext > 0 && (
                        <div className="travel-distance">
                          <Navigation className="detail-icon" />
                          <span>{UTILS.formatDistance(item.travelDistanceToNext)}</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>

      <div className="itinerary-settings">
        <h4>Route Settings</h4>
        <div className="settings-grid">
          <div className="setting-item">
            <span className="setting-label">Start Time:</span>
            <span className="setting-value">{routeSettings?.startTime || '09:00'}</span>
          </div>
          
          <div className="setting-item">
            <span className="setting-label">Available Time:</span>
            <span className="setting-value">
              {UTILS.formatDuration(routeSettings?.totalTimeAvailable || 480)}
            </span>
          </div>
          
          <div className="setting-item">
            <span className="setting-label">Optimization:</span>
            <span className="setting-value">
              {routeSettings?.optimizationLevel === 'optimal' ? 'Optimal (DP)' : 'Fast (Greedy)'}
            </span>
          </div>
        </div>
      </div>

      <div className="itinerary-tips">
        <h4>ðŸ’¡ Travel Tips</h4>
        <ul className="tips-list">
          <li>Check opening hours before visiting temples and palaces</li>
          <li>Carry water and snacks for longer journeys</li>
          <li>Keep extra time buffer for traffic in city areas</li>
          <li>Download offline maps for areas with poor connectivity</li>
          <li>Respect local customs and dress codes at religious sites</li>
        </ul>
      </div>

      <div className="emergency-info">
        <h4>ðŸ†˜ Emergency Contacts</h4>
        <div className="emergency-grid">
          <div className="emergency-item">
            <span className="emergency-label">Police:</span>
            <span className="emergency-number">100</span>
          </div>
          <div className="emergency-item">
            <span className="emergency-label">Ambulance:</span>
            <span className="emergency-number">108</span>
          </div>
          <div className="emergency-item">
            <span className="emergency-label">Fire:</span>
            <span className="emergency-number">101</span>
          </div>
          <div className="emergency-item">
            <span className="emergency-label">Tourist Helpline:</span>
            <span className="emergency-number">1363</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ItineraryDisplay;